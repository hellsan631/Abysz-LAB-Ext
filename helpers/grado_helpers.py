import gradio as gr

def add_tab(
    main_fn,
    test_dfi_fn,
    dfi_video_fn,
    deflickers_fn,
    over_fuse_fn,
    extract_video_fn,
):
    with gr.Blocks(analytics_enabled=False) as demo:
        with gr.Tabs():
            with gr.Tab("Main"):
                with gr.Row():
                    with gr.Column():
                        with gr.Column():
                            gr.Markdown("# Abysz LAB 0.2.0 Temporal coherence tools")
                            gr.Markdown("## DFI Render")
                        with gr.Column():
                            reference_frames_folder = gr.Textbox(label="Original/reference frames folder", placeholder="RAW frames, or generated ones. (Read the strategies in the guide)")
                            generated_frames_folder = gr.Textbox(label="Generated frames folder", placeholder="The frames of AI generated video")
                            frames_output_folder = gr.Textbox(label="Output folder", placeholder="Remember that each generation overwrites previous frames in the same folder.")
                            magick_file_location_override = gr.Textbox(label="Magick.exe location", placeholder="If you have problems with the magick.exe location, you can override it here.")
                        with gr.Accordion("Info", open=False):
                            gr.Markdown("This process detects static areas between frames (white) and moving areas (black). Use preview map and you will understand this. Basically, it will force the white areas to stay the same on the next frame.")
                            gr.Markdown("DFI Tolerance adjusts how stiff this process is. Higher = more rigidity + corruption. Lower = more flexible, less corruption, but allows more flick. ")
                            gr.Markdown("As complement, you can clean the map, to reduce detail and noise, or fatten/expand the areas detected by DFI. It is better that you use preview many times to experience how it works.")
                            gr.Markdown("### IMPORTANT: The general algorithm is optimized to maintain a balance between deflicking and corruption, so that it is easier to use StableDiffusion at low denoising to reconstruct lost detail while preserving the stability gained.")
                        with gr.Row():
                            denoise_blur = gr.Slider(minimum=0, maximum=30, value=0, step=1, label="Map Denoise")
                            dfi_strength = gr.Slider(minimum=0.5, maximum=20, value=5, step=0.5, label="DFI Tolerance")
                            dfi_deghost = gr.Slider(minimum=0, maximum=50, value=0, step=1, label="DFI Expand")
                        with gr.Accordion("Info", open=False):
                            gr.Markdown("Here you can preview examples of the motion map for those parameters. It is useful, for example, to adjust denoise if you see that it detects unnecessary graininess. Keep in mind that what you see represents movement between two frames.")
                            gr.Markdown("A good balance point is to throttle DFI until you find just a few things in areas that should be static. If you force it to be TOO clean, it will mostly increase the overall corruption.")
                        with gr.Row():
                            dfi_test = gr.Button(value="Preview DFI Map")
                            test_mode = gr.Slider(minimum=0, maximum=100, value=0, step=1, label="Preview amount. 0 = Quick shot")
                        with gr.Accordion("Advanced", open=False):
                            with gr.Accordion("Info", open=False):
                                gr.Markdown("**Inter Denoise:** Reduces render pixelation generated by corruption. However, be careful. It's resource hungry, and might remove excess detail. Not recommended to change size or FPD, but to use Stable Diffusion to remove the pixelation later.")
                                gr.Markdown("**Inter Blur:** Fine tunes the dynamic blur algorithm for DFI map. Lower = Stronger blur effects. Between 2-3 recommended.")
                                gr.Markdown("**Corruption Refresh:** To reduce the distortion generated by the process, you can recover original information every X number of frames. Lower number = faster refresh.")
                                gr.Markdown("**Corruption Preserve:** Here you decide how much corruption keep in each corruption refresh. Low values will recover more of the original frame, with its changes and flickering, in exchange for reducing corruption. You must find the balance that works best for your goal.")
                                gr.Markdown("**Smooth:** This smoothes the edges of the interpolated areas. Low values are currently recommended until the algorithm is updated.")
                            with gr.Row():
                                inter_denoise = gr.Slider(minimum=1, maximum=25, value=9, step=1, label="Inter Denoise")
                                inter_denoise_size = gr.Slider(minimum=1, maximum=25, value=9, step=2, label="Inter Denoise Size")
                                inter_denoise_speed = gr.Slider(minimum=1, maximum=15, value=3, step=1, label="Inter Denoise FPD")
                                fine_blur = gr.Slider(minimum=1, maximum=5, value=3, step=0.1, label="Inter Blur")
                            gr.Markdown("### The new dynamic algorithm will handle these parameters. Activate them only for manual control.")
                            with gr.Row():
                                frame_refresh_frequency = gr.Slider(minimum=0, maximum=30, value=0, step=1, label="Corruption Refresh (Lower = Faster)")
                                refresh_strength = gr.Slider(minimum=0, maximum=100, value=0, step=5, label="Corruption Preserve")
                                smooth = gr.Slider(minimum=1, maximum=99, value=1, step=2, label="Smooth")
                        with gr.Row():
                            frames_limit = gr.Number(label="Frames to render. 0=ALL")
                            run_button = gr.Button(value="Run DFI", variant="primary")
                            output_placeholder = gr.Textbox(label="Status", placeholder="STAND BY...")
                        video_dfi = gr.Button(value="Show output folder video")
                    with gr.Column():
                        with gr.Column():
                            gr.Markdown("# |")
                            gr.Markdown("## Deflickers Playground")
                            with gr.Column():
                                deflicker_frames_folder = gr.Textbox(label="Frames folder", placeholder="Frames to process")
                                deflicker_frames_output_folder = gr.Textbox(label="Output folder", placeholder="Processed frames")
                                with gr.Accordion("Info", open=False):
                                    gr.Markdown("I made this series of deflickers based on the standard that Vegas Pro includes. You can use them together or separately. Be careful when mixing them.")
                                    gr.Markdown("**Blend:** Blends a percentage between frames. This can soften transitions and highlights. 50 is half of each frame. 80 or 20 are recommended values.")
                                    gr.Markdown("**Overlay:** Use the overlay image blending mode. Note that it works particularly good at mid-high values, wich will modify the overall contrast. You will have to decide what works for you.")
                                    gr.Markdown("**Normalize:** Calculates the average between frames to merge them. It may be more practical if you don't have a specific Blend deflicker value in mind.")
                                ddf_strength = gr.Slider(minimum=0, maximum=1, value=0, step=0.01, label="BLEND (0=Off)")
                                over_strength = gr.Slider(minimum=0, maximum=1, value=0, step=0.01, label="OVERLAY (0=Off)")
                                norm_strength = gr.Slider(minimum=0, maximum=1, value=0, step=1, label="NORMALIZE (0=Off))")
                                dfk_button = gr.Button(value="Deflickers")
            with gr.Tab("LAB Tools"):
                with gr.Column():
                    gr.Markdown("## Style Fuse")
                    with gr.Accordion("Info", open=False):
                                    gr.Markdown("With this you can merge two sets of frames with overlay technique. For example, you can take a style video that is just lights and/or colors, and overlay it on top of another video.")
                                    gr.Markdown("The resulting video will be useful for use in Img2Img Batch and that the AI render preserves these added color and lighting details, along with the details of the original video.")
                    with gr.Row():
                        fuse_style_frames_folder = gr.Textbox(label="Style frames", placeholder="Style to fuse")
                        fuse_video_frames_folder = gr.Textbox(label="Video frames", placeholder="Frames to process")
                    with gr.Row():
                        fuse_output_frames_folder = gr.Textbox(label="Output folder", placeholder="Processed frames")   
                        fuse_strength = gr.Slider(minimum=0.1, maximum=1, value=0.5, step=0.01, label="Fuse Strength")
                        fuse_button = gr.Button(value="Fuse")
                    gr.Markdown("## Video extract")
                    with gr.Row():
                        video_extract_original_folder = gr.Textbox(label="Video path", placeholder="Remember to use same fps as generated video for DFI")
                        video_extract_output_folder = gr.Textbox(label="Output folder", placeholder="Processed frames")
                    with gr.Row():
                        fps_count = gr.Number(label="Fps. 0=Original")
                        vidextract_button = gr.Button(value="Extract")
                    output_placeholder2 = gr.Textbox(label="Status", placeholder="STAND BY...") 
            with gr.Tab("Guide"):
                with gr.Column():
                    gr.Markdown("# What DFI does?")
                    with gr.Accordion("Info", open=False):
                        gr.Markdown("DFI processing analyzes the motion of the original video, and attempts to force that information into the generated video. Demo on https://github.com/AbyszOne/Abysz-LAB-Ext")
                        gr.Markdown("In short, this will reduce flicker in areas of the video that don't need to change, but SD does. For example, for a man smoking, leaning against a pole, it will detect that the pole is static, and will try to prevent it from changing as much as possible.")
                        gr.Markdown("This is an aggressive process that requires a lot of control for each context. Read the recommended strategies.")
                        gr.Markdown("Although Video to Video is the most efficient way, a DFI One Shot method is under experimental development as well.")
                    gr.Markdown("# Usage strategies")
                    with gr.Accordion("Info", open=False):
                        gr.Markdown("If you get enough understanding of the tool, you can achieve a much more stable and clean enough rendering. However, this is quite demanding.")
                        gr.Markdown("Instead, a much friendlier and faster way to use this tool is as an intermediate step. For this, you can allow a reasonable degree of corruption in exchange for more general stability. ")
                        gr.Markdown("You can then clean up the corruption and recover details with a second step in Stable Diffusion at low denoising (0.2-0.4), using the same parameters and seed.")
                        gr.Markdown("In this way, the final result will have the stability that we have gained, maintaining final detail. If you find a balanced workflow, you will get something at least much more coherent and stable than the raw AI render.")
                        gr.Markdown("**OPTIONAL:** Although not ideal, you can use the same AI generated video as the source, instead of the RAW. The trick is to use DFI and denoise to wash out map details so that you reduce low/mid changes between frames. If you only need a soft deflick, it is a valid option.")
        
        dt_inputs=[reference_frames_folder, generated_frames_folder, denoise_blur, dfi_strength, dfi_deghost, test_mode, smooth]
        run_inputs=[
            reference_frames_folder, 
            generated_frames_folder, 
            frames_output_folder, 
            denoise_blur, dfi_strength, 
            dfi_deghost, 
            test_mode, 
            inter_denoise, 
            inter_denoise_size, 
            inter_denoise_speed, 
            fine_blur, 
            frame_refresh_frequency, 
            refresh_strength, 
            smooth, 
            frames_limit,
            magick_file_location_override,
        ]
        dfk_inputs=[deflicker_frames_folder, deflicker_frames_output_folder, ddf_strength, over_strength, norm_strength]
        fuse_inputs=[fuse_style_frames_folder, fuse_video_frames_folder, fuse_output_frames_folder, fuse_strength]
        ve_inputs=[video_extract_original_folder, video_extract_output_folder, fps_count]
        
        dfi_test.click(fn=test_dfi_fn, inputs=dt_inputs, outputs=output_placeholder)
        run_button.click(fn=main_fn, inputs=run_inputs, outputs=output_placeholder)
        video_dfi.click(fn=dfi_video_fn, inputs=frames_output_folder, outputs=output_placeholder)
        dfk_button.click(fn=deflickers_fn, inputs=dfk_inputs, outputs=output_placeholder)
        fuse_button.click(fn=over_fuse_fn, inputs=fuse_inputs, outputs=output_placeholder2)
        vidextract_button.click(fn=extract_video_fn, inputs=ve_inputs, outputs=output_placeholder2)
    
    return [(demo, "Abysz LAB", "demo")]